1.
У каждого своя тема + вопрос
Создать 10 классов (чтобы объекты были связаны)
- Должны быть связи – логика иерархии
- Хотя бы 2 LocalDateTime и 2 Date
- Должны быть разнесены по пакетам (по темам)
- Конструкторы должны быть расставлены корректно
- Хотя бы в 1 из них придумать логичное статическое поле и метод
- кроме getter-ов и setter-ов хотя бы в 3 из них создать простые методы (с возвращаемым типом и без)
- хотя бы в 2 из них перегрузить методы
- заполнить в методе main
- вызвать созданные методы методы (кастомные)
Иерархия обязательно + бизнес вопрос, который можно сделать кустаным способом (главное мне видеть, что вы понимаете как оперировать над объектами и использование всяких конструкций как циклы, if-else и тд)

2.
- Создать еще 5 классов родителей для иерархии (если нужно перенести туда что то из существуюших классов – переносите)
- хотя бы пару должно быть абстрактными с абстрактыми методами
- Хотя бы 2 из них должны быть родителями для более чем одного наследника
- В иерархии переопределить toString, equals, hashСode в каждом классе
- Переопределить хотя бы в 1 классе свой кастомный метод (если его там нет, то написать)
- в методе main добавить новые классы к заполнению
- исходя из темы иерархии создать 1 класс, который будет ей управлять и там создать метод, принимающий родиьтельский класс
- Отдельно в main создать все классы в наследовании с помощью полиморфизма и вызвать методы из управляющего класса
PS: управляющий класс - это класс в котором находятся методы, в которых параметры - родительские классы. В этом мало смысла, но это для того, чтобы вы попрактиковались с полиморфизмом, если все таки не понял кто то, что я имею ввиду, то пишите здесь или в личку

3.
Добавить 5 интерфейсов в иерархию (осознанно) (если имеет 1 метод, то ничего страшного), если нужно, то с многими методами
В сервисном классе реализовать методы которые будут принимать эти интерфейсы и что то с ними делать
Поменять все комменты на java-docs
P.S.: если нужен коммент внутри метода над какой то строкой, то лучше оставить коммент, java-doc делается если нужен коммент над методом, конструктором, полем класса или классом
по дз 3,  прошу всех обратить внимание, что все таки сказано, что методы toString, equals и hashcode должны быть переопределены в каждом классе-сущности, а не в выборочных (только если вы считаете что в классе родителе все равно есть equals а в ребенке он особо не нужен) (

4.
Создать 1 кастомный exception от extends Exception и 2 от RuntimeException (осознанных), пробросить их, оработать в main или другом методе (использовать блок finally, для логирования, например, что операция закончена)
В 1 месте пробросить exception дальше не обрабатывая его
Добавить static блок c инициализацией логгера
Создать класс и использовать его в try-cache with resources (любой, можно бессмысленный)
Подтянуть в проект log4j2 и изменить все System.out.println на логгеры, чтобы они писали и в консоль и в файл

5.
!!!!!
Добавить 3 Generic в проект
Переделать все массивы в коллекции → минимум 5 коллекций (ArrayList, HashSet или TreeSet)
Хотя бы 1 Map (HashMap)

почитать статьи про коллекции и мапы
почитать про правила переопрелделения hashcode и equals
почичитать про generic-и, wildcard-ы и зачем они нужны

6.
Перевести проект на Maven
Добавить log4j2 как dependency
Добавить compiler plugin на версию 1.8
Посмотреть как устроена папка .target, .m2
Добавить текущую версию как 1.0-SNAPSHOT (каждое новое изменение будет + 0.1 к версии). Когда даю добро, что все хорошо, то версия 1.0, а следующее задание – 2.0-SNAPSHOT

7.
Устновить git локально
Создать GitHub аккаунт, где nickname это первая буква имени и фамилия
Создать локально ssh ключ (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) и добавить его в ваш аккаунт.
Создать репозиторий и склонить используя ssh.
Перевести текущий проект на Git
Поэксперементировать делать pull, push, бранчеваться, резолвать конфликты, делать PR-ы
Почитать про clone, add, commit, pull, push, stash, merge, rebase посмотреть какие есть еще
Скинуть линки на GitHub, посмотрю что пробовали что то делать по истории
